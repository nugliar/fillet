/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_filler.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rsharipo <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/07/15 14:20:38 by rsharipo          #+#    #+#             */
/*   Updated: 2018/07/20 17:15:32 by rsharipo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fillit.h"
#include <stdlib.h>
#include <stdio.h>

void	calc_shift(char *tet, t_stack *elem)
{
	int	i;
	int	j;
	int	min;

	i = 0;
	j = 0;
	min = 22;
	while (i < 20)
	{
		if (tet[i] == '#')
		{
			*(elem->coor + j) = i;
			*(elem->shift + j) = i % 5;
			j++;
		}
		i++;
	}
	i = -1;
	while (++i < 4)
		min = (*(elem->shift + i) < min) ? *(elem->shift + i) : min;
	while (--i >= 0)
		*(elem->shift + i) = *(elem->shift + i) - min;
}

int		ft_solver(t_list *data, t_stack *elem, int size)
{
	int	i;
	int	pos;

	i = 0;
	pos = 0;
	while (pos < size)
	{
		i = 0;
		while (i < data->num && !check_elem(elem, i))
			i++;
		if (i == data->num)
			return (1);
		elem = add_elem(elem, i);
		if (push_to_board(data, elem, i, pos))
		{
			if (ft_solver(data, elem, size))
				return (1);
			else
			{
				erase_from_board(data, elem, i, pos);
				pop_elem(&elem);
			}
		}
		else
			pop_elem(&elem);
		pos++;
	}
	return (0);
}

char	*ft_filler(t_list *data, char **input, int num)
{
	t_stack	*elem;

	elem = NULL;
	if (num == 0)
		return ("error");
	data->input = input;
	data->size = sq_rt(num) * 2;
	data->num = num;
	create_board(data);
	if (!data->board)
		return ("error");
	while (!ft_solver(data, elem, data->size * data->size))
	{
		data->size = data->size + 1;
		printf("...increasing size to %d\n", data->size);
		create_board(data);
		if (!(data->board))
			return ("error");
	}
	return (data->board);
}
